{"version":3,"file":"quizzify.min.js","sources":["../../src/quiz.ts"],"sourcesContent":["export class Quiz implements QuizInterface {\n  /**\n   * A class for manage a quiz\n   * @param questions - a list of questions\n   *\n   *\n   * @note\n   * `answer` word will used to a general answer provided a priori.\n   * `reply` or `replied` is a kind of external answer provided during the quiz.\n   */\n\n  questions: Question[] = [];\n  questionsShadow: Question[] = [];\n  answers: [] = [];\n  questionIndex: number = 0;\n  maxScore: number = 10;\n\n  constructor(questions: Question[] = []) {\n    this.questions = questions;\n    this.questionsShadow = [...questions];\n    this.questionIndex = 0;\n  }\n  getCurrenQuestionShadow(): Question {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /** Resets the question index. */\n  resetQuestionIndex(): void {\n    this.questionIndex = 0;\n  }\n\n  /** Sets a new question index value */\n  setQuestionIndex(index: number): void {\n    if (index <= 0){\n      index = 0;\n    }\n    if(index >= this.questions.length){\n      index = this.questions.length\n    }\n    this.questionIndex = index;\n  }\n\n  /** Returns the current question */\n  getCurrentQuestion(): Question {\n    return this.questions[this.questionIndex];\n  }\n\n  getCurrentQuestionShadow(): Question {\n    return this.questionsShadow[this.questionIndex];\n  }\n\n  /** Increases the question index */\n  prevQuestion(): void {\n    this.questionIndex = this.questionIndex <= 0 ? 0 : this.questionIndex-=1;\n  }\n  /** Decreases the question index */\n  nextQuestion(): void {\n    this.questionIndex = this.questionIndex >= this.questions.length - 1 ? this.questions.length - 1 : this.questionIndex+=1;\n  }\n\n  /** Updates the max score value */\n  setMaxScore(maxScore: number): void {\n    this.maxScore = maxScore;\n  }\n\n  /** Returns the current reply stored */\n  getCurrentReply(): Answer| undefined {\n    return this.questionsShadow[this.questionIndex].reply;\n  }\n\n  /** Updates the reply value of a specific question */\n  setReply(question: Question, reply: Answer): void {\n    const questionIndex = this.findQuestionIndex(question);\n    if(questionIndex)\n      this.questionsShadow[questionIndex].reply = reply;\n  }\n\n  /** Sets a reply for the current question */\n  setCurrentReply(answer: Answer): void {\n    this.questionsShadow[this.questionIndex].reply = answer;\n  }\n\n  setMaxTime(maxTime: number): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  maxTimeReached(callback: Function): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  startTimeCount(): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /** Removes white spaces from a string and convert it to lowercase\n   * @param str - a string.\n   */\n  clearString(str: string): string {\n    let cleanString = str.trim().toLowerCase();\n    return cleanString\n  }\n\n  /** Applies clearString() to an array of strings */\n  clearStringArray(array: string[]): string[] {\n    return array.map(str => this.clearString(str));\n  }\n\n  /** Verify if a numeric answer is correct. If an error is provided it will evaluate `reply` on the\n   * range of `reply >= answer * (1 - error)` && `reply <= answer * (1 + error)`\n   *\n   * @param answer {number} - a number\n   * @param replid {number} - another number\n   * @param error {number} - an arrow allowed between `answer` and `reply`\n   */\n  correctNumericAnswer(answer: Answer , reply: Answer, error: number| undefined){\n    const answerNumeric = Number(answer);\n    const replyNumeric = Number(reply);\n    const errorNumeric = Number(error);\n\n    if(!errorNumeric) return answerNumeric === replyNumeric;\n\n    const errorAbs = Math.abs(errorNumeric);\n    const min = answerNumeric * (1 - errorAbs);\n    const max = answerNumeric * (1 + errorAbs);\n    return replyNumeric >= min && replyNumeric <= max;\n  }\n\n  /** Applies correctNumbericAnswer to array of answers */\n  correctNumbericAnswersArray(answers: Answer[], replies: Answer[], error: number| undefined){\n    return answers.map((answer, index) => this.correctNumericAnswer(answer, replies[index], error));\n  }\n\n  /** Verifies if answer and reply are similar strings */\n  correctStringAnswer(answer: Answer, reply: Answer){\n    if(typeof answer === 'string' && typeof reply === 'string'){\n      const cleanAnswer = this.clearString(answer);\n      const cleanreply = this.clearString(reply);\n      return cleanAnswer === cleanreply;\n    }\n    return false;\n  }\n\n  /** Applies  correctStringAnswer to an array of answers */\n  correctStringAnswerArray(answers: Answer[], replies: Answer[]){\n    return answers.map((answer, index) => this.correctStringAnswer(answer, replies[index]));\n  }\n\n  /** Checks if a numeric answer or an array of numeric answers is correct */\n  isCorrectNumeric(answer: Answer | Answer[], reply: Answer | Answer[], error: number | undefined){\n    if (typeof answer === 'number' && typeof reply === 'number'){\n      return this.correctNumericAnswer(answer, reply, error);\n    }\n    if( typeof answer === 'object' && typeof reply === 'object'){\n      return this.correctNumbericAnswersArray(answer, reply, error);\n    }\n    return false;\n  }\n\n  /**\n   * Checks if a string answer is true\n  */\n  isCorrectString(answer: Answer | Answer[], reply: Answer | Answer []){\n    if (typeof answer === 'string' && typeof reply === 'string'){\n      return this.correctStringAnswer(answer, reply);\n    }\n    if (typeof answer === 'object' && typeof reply === 'object'){\n      return this.correctStringAnswerArray(answer, reply);\n    }\n    return false;\n  }\n\n  /** Verify if the answer for a question is correct. */\n  isCorrect(question: Question, questionReply: Question): boolean | boolean[] {\n    if (!questionReply.reply) return false;\n    const { answer, error } = question;\n    const { reply } = questionReply;\n\n    if(question.type === \"number\"){\n      return this.isCorrectNumeric(answer, reply, error);\n    }\n\n    if(question.type === \"string\"){\n      return this.isCorrectString(answer, reply);\n    }\n\n    return false;\n  }\n\n  /** Returns the uniform score calculated as the maxScore divided by the length of the quiz */\n  getUniformScore(){\n    return this.maxScore / this.questions.length;\n  }\n\n  /** Calculates a single question score */\n  qualifyQuestion(index: number){\n    let totalScore = 0;\n    let uniformScore =  this.getUniformScore();\n\n    const question = this.questions[index];\n    const questionReply = this.questionsShadow[index];\n    const questionScore = question.score || uniformScore;\n    const isCorrect = this.isCorrect(question, questionReply);\n\n    if (typeof isCorrect === 'boolean') {\n      if(isCorrect)\n        totalScore += questionScore;\n    }\n\n    if(typeof isCorrect === 'object'){\n      const itemScore = questionScore / isCorrect.length;\n      isCorrect.map(correct => {\n        if (correct)\n          totalScore += itemScore;\n      });\n    }\n\n    return totalScore;\n\n  }\n\n  /** Calculates the current score of the quiz based on the correct replies given */\n  qualify(): string | number {\n    let totalScore = 0;\n    this.questions.map((question: Question, index: number) => {\n     totalScore += this.qualifyQuestion(index);\n    })\n    return totalScore;\n  }\n\n  /** Returns the index correspoindig to a question\n   * @param question - a question object\n   */\n  findQuestionIndex(question: Question): number | undefined {\n    return this.questions.findIndex((item: Question) => item.question === question.question);\n  }\n\n  /** Replaces questions for the current quiz */\n  setQuestions(questions: Question[]): void {\n    this.questions = questions;\n    this.questionsShadow = [...questions];\n  }\n\n  /** Removes a question from the quiz */\n  removeQuestion(question: Question): void {\n    const questionIndex = this.findQuestionIndex(question);\n    if(typeof questionIndex == \"number\"){\n      this.questions.splice(questionIndex, 1);\n      this.questionsShadow.splice(questionIndex, 1);\n    }\n  }\n\n  /** Adds a new question to the quiz */\n  appendQuestion(question: Question): void {\n    this.questions?.push(question);\n    this.questionsShadow?.push(question);\n  }\n\n  /** Renders a string template with some variables. */\n  static parseTemplate(template: string, variables: Object): string | undefined {\n    const names = Object.keys(variables);\n    const values = Object.values(variables);\n    try{\n      return  new Function(...names, \"return `\"+template+\"`;\")(...values)\n    }catch(err){\n      console.error(err);\n      return undefined;\n    }\n  }\n\n  /** Returns the number of questions */\n  get length(): number {\n    return this.questions.length;\n  }\n\n  /** Returns the current question index */\n  get index(): number {\n    return this.questionIndex;\n  }\n\n}\n"],"names":["constructor","questions","this","questionsShadow","answers","questionIndex","maxScore","getCurrenQuestionShadow","Error","resetQuestionIndex","setQuestionIndex","index","length","getCurrentQuestion","getCurrentQuestionShadow","prevQuestion","nextQuestion","setMaxScore","getCurrentReply","reply","setReply","question","findQuestionIndex","setCurrentReply","answer","setMaxTime","maxTime","maxTimeReached","callback","startTimeCount","clearString","str","trim","toLowerCase","clearStringArray","array","map","correctNumericAnswer","error","answerNumeric","Number","replyNumeric","errorNumeric","errorAbs","Math","abs","correctNumbericAnswersArray","replies","correctStringAnswer","correctStringAnswerArray","isCorrectNumeric","isCorrectString","isCorrect","questionReply","type","getUniformScore","qualifyQuestion","totalScore","uniformScore","questionScore","score","itemScore","correct","qualify","findIndex","item","setQuestions","removeQuestion","splice","appendQuestion","_a","push","_b","static","template","variables","names","Object","keys","values","Function","err","console"],"mappings":"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"}