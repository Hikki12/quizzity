{"version":3,"file":"quizzify.min.js","sources":["../../src/quizzify.ts"],"sourcesContent":["export class Quiz implements QuizInterface {\n  questions: Question[] = [];\n  questionsCopy: Question[] = [];\n  answers: [] = [];\n  questionIndex: number = 0;\n  maxScore: number = 10;\n\n  constructor(questions: Question[] = []) {\n    this.questions = questions;\n    this.questionsCopy = [...questions];\n    this.questionIndex = 0;\n  }\n\n  /** Resets the question index. */\n  resetQuestionIndex(): void {\n    this.questionIndex = 0;\n  }\n\n  /** Sets a new question index value */\n  setQuestionIndex(index: number): void {\n    if (index <= 0){\n      index = 0;\n    }\n    if(index >= this.questions.length){\n      index = this.questions.length\n    }\n    this.questionIndex = index;\n  }\n\n  /** Returns the current question */\n  getCurrentQuestion(): Question {\n    return this.questions[this.questionIndex];\n  }\n\n  /** Increases the question index */\n  prevQuestion(): void {\n    this.questionIndex = this.questionIndex <= 0 ? 0 : this.questionIndex-=1;\n  }\n  /** Decreases the question index */\n  nextQuestion(): void {\n    this.questionIndex = this.questionIndex >= this.questions.length - 1 ? this.questions.length - 1 : this.questionIndex+=1;\n  }\n\n  /** Updates the max score value */\n  setMaxScore(maxScore: number): void {\n    this.maxScore = maxScore;\n  }\n\n  /** Updates the replied value of a specific question */\n  setAnswer(question: Question, replied: Answer): void {\n    const questionIndex = this.findQuestionIndex(question);\n    if(questionIndex)\n      this.questionsCopy[questionIndex].replied = replied;\n  }\n\n  /** Sets a reply for the current question */\n  setCurrentAnswer(answer: Answer): void {\n    this.questionsCopy[this.questionIndex].replied = answer;\n  }\n\n  setMaxTime(maxTime: number): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  maxTimeReached(callback: Function): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  startTimeCount(): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /** Verify if the answer for a question is correct. */\n  isCorrect(answer: Answer, replied: Answer): boolean {\n    return false;\n  }\n\n  qualify(): string | number {\n    let totalScore = 0;\n    let equidistributed = this.maxScore / this.questions.length ;\n\n    this.questions.map((question: Question, index: number) => {\n      const answer = question.answer as Answer;\n      const replied = this.questionsCopy[index].replied as Answer;\n      const questionScore = question.score;\n      if (this.isCorrect(answer, replied)){\n        if(questionScore){\n          totalScore += questionScore;\n        }else {\n          totalScore += equidistributed;\n        }\n      }\n    })\n    return totalScore;\n  }\n\n  /** Returns the index correspoindig to a question */\n  findQuestionIndex(question: Question): number | undefined {\n    return this.questions.findIndex((item: Question) => item.question === question.question);\n  }\n\n  /** Replaces questions for the current quiz */\n  setQuestions(questions: Question[]): void {\n    this.questions = questions;\n    this.questionsCopy = [...questions];\n  }\n\n  /** Removes a question from the quiz */\n  removeQuestion(question: Question): void {\n    const questionIndex = this.findQuestionIndex(question);\n    if(typeof questionIndex == \"number\"){\n      this.questions.splice(questionIndex, 1);\n    }\n  }\n\n  /** Adds a new question to the quiz */\n  appendQuestion(question: Question): void {\n    this.questions?.push(question);\n  }\n\n  static parseTemplate(template: string, variables: Object): string | undefined {\n    const names = Object.keys(variables);\n    const values = Object.values(variables);\n    try{\n      return  new Function(...names, \"return `\"+template+\"`;\")(...values)\n    }catch(err){\n      console.error(err);\n      return undefined;\n    }\n  }\n\n  /** Returns the number of questions */\n  get length(): number {\n    return this.questions.length;\n  }\n\n  get index(): number {\n    return this.questionIndex;\n  }\n\n}\n"],"names":["constructor","questions","this","questionsCopy","answers","questionIndex","maxScore","resetQuestionIndex","setQuestionIndex","index","length","getCurrentQuestion","prevQuestion","nextQuestion","setMaxScore","setAnswer","question","replied","findQuestionIndex","setCurrentAnswer","answer","setMaxTime","maxTime","Error","maxTimeReached","callback","startTimeCount","isCorrect","qualify","totalScore","equidistributed","map","questionScore","score","findIndex","item","setQuestions","removeQuestion","splice","appendQuestion","_a","push","static","template","variables","names","Object","keys","values","Function","err","console","error"],"mappings":"uFAOEA,YAAYC,EAAwB,IANpCC,KAASD,UAAe,GACxBC,KAAaC,cAAe,GAC5BD,KAAOE,QAAO,GACdF,KAAaG,cAAW,EACxBH,KAAQI,SAAW,GAGjBJ,KAAKD,UAAYA,EACjBC,KAAKC,cAAgB,IAAIF,GACzBC,KAAKG,cAAgB,CACtB,CAGDE,qBACEL,KAAKG,cAAgB,CACtB,CAGDG,iBAAiBC,GACXA,GAAS,IACXA,EAAQ,GAEPA,GAASP,KAAKD,UAAUS,SACzBD,EAAQP,KAAKD,UAAUS,QAEzBR,KAAKG,cAAgBI,CACtB,CAGDE,qBACE,OAAOT,KAAKD,UAAUC,KAAKG,cAC5B,CAGDO,eACEV,KAAKG,cAAgBH,KAAKG,eAAiB,EAAI,EAAIH,KAAKG,eAAe,CACxE,CAEDQ,eACEX,KAAKG,cAAgBH,KAAKG,eAAiBH,KAAKD,UAAUS,OAAS,EAAIR,KAAKD,UAAUS,OAAS,EAAIR,KAAKG,eAAe,CACxH,CAGDS,YAAYR,GACVJ,KAAKI,SAAWA,CACjB,CAGDS,UAAUC,EAAoBC,GAC5B,MAAMZ,EAAgBH,KAAKgB,kBAAkBF,GAC1CX,IACDH,KAAKC,cAAcE,GAAeY,QAAUA,EAC/C,CAGDE,iBAAiBC,GACflB,KAAKC,cAAcD,KAAKG,eAAeY,QAAUG,CAClD,CAEDC,WAAWC,GACT,MAAM,IAAIC,MAAM,0BACjB,CAEDC,eAAeC,GACb,MAAM,IAAIF,MAAM,0BACjB,CAEDG,iBACE,MAAM,IAAIH,MAAM,0BACjB,CAGDI,UAAUP,EAAgBH,GACxB,OAAO,CACR,CAEDW,UACE,IAAIC,EAAa,EACbC,EAAkB5B,KAAKI,SAAWJ,KAAKD,UAAUS,OAcrD,OAZAR,KAAKD,UAAU8B,KAAI,CAACf,EAAoBP,KACtC,MAAMW,EAASJ,EAASI,OAClBH,EAAUf,KAAKC,cAAcM,GAAOQ,QACpCe,EAAgBhB,EAASiB,MAC3B/B,KAAKyB,UAAUP,EAAQH,KAEvBY,GADCG,GAGaF,EAEjB,IAEID,CACR,CAGDX,kBAAkBF,GAChB,OAAOd,KAAKD,UAAUiC,WAAWC,GAAmBA,EAAKnB,WAAaA,EAASA,UAChF,CAGDoB,aAAanC,GACXC,KAAKD,UAAYA,EACjBC,KAAKC,cAAgB,IAAIF,EAC1B,CAGDoC,eAAerB,GACb,MAAMX,EAAgBH,KAAKgB,kBAAkBF,GAClB,iBAAjBX,GACRH,KAAKD,UAAUqC,OAAOjC,EAAe,EAExC,CAGDkC,eAAevB,SACC,QAAdwB,EAAAtC,KAAKD,iBAAS,IAAAuC,GAAAA,EAAEC,KAAKzB,EACtB,CAED0B,qBAAqBC,EAAkBC,GACrC,MAAMC,EAAQC,OAAOC,KAAKH,GACpBI,EAASF,OAAOE,OAAOJ,GAC7B,IACE,OAAQ,IAAIK,YAAYJ,EAAO,WAAWF,EAAS,KAA3C,IAAoDK,EAI7D,CAHA,MAAME,GAEL,YADAC,QAAQC,MAAMF,EAEf,CACF,CAGGxC,aACF,OAAOR,KAAKD,UAAUS,MACvB,CAEGD,YACF,OAAOP,KAAKG,aACb"}